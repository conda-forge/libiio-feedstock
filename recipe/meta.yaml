{% set version = "0.24" %}
{% set build = 0 %}

package:
  name: libiio-split
  version: {{ version }}

source:
  url: https://github.com/analogdevicesinc/libiio/archive/v{{ version }}.tar.gz
  sha256: a2b5d848531ea64fd9f95327dfd5a588bd227d9577281ec375e822702c6a52d5

build:
  number: {{ build }}

outputs:
  - name: libiio-c
    script: install_libiio.bat  # [win]
    script: install_libiio.sh  # [not win]
    build:
      run_exports:
        - {{ pin_subpackage('libiio-c', max_pin='x') }}
    requirements:
      build:
        - {{ compiler('c') }}
        - cmake
        # libudev is on its own in CentOS 6, packaged with systemd in CentOS 7
        - {{ cdt('libudev-devel') }}  # [linux and cdt_name=='cos6']
        - {{ cdt('systemd-devel') }}  # [linux and cdt_name=='cos7']
        - make  # [not win]
        - ninja  # [win]
        - pkg-config
        - sysroot_linux-64 2.17  # [linux64]
      host:
        - bison  # [linux]
        - flex  # [linux]
        - libaio  # [linux]
        - libusb >=1
        - libxml2
        - zstd
      run_constrained:
        # require the MACOSX_DEPLOYMENT_TARGET set in conda_build_config.yaml
        # (10.11 to be able to compile bonjour support)
        - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default("10.9") }}  # [osx]
    test:
      commands:
        # verify that executables can be run
        {% set cmds = ["iio_attr", "iio_genxml", "iio_info", "iio_readdev"] %}
        {% set cmds = cmds + ["iio_reg", "iio_writedev"] %}
        {% set cmds = cmds + ["iio_adi_xflow_check"] %}  # [not win]
        {% set cmds = cmds + ["iiod"] %}  # [linux]
        {% for each_cmd in cmds %}
        - {{ each_cmd }} --help
        {% endfor %}

        # verify that headers get installed
        - test -f $PREFIX/include/iio.h  # [not win]
        - if not exist %PREFIX%\\Library\\include\\iio.h exit 1  # [win]

        # verify that libraries get installed
        - test -f $PREFIX/lib/libiio${SHLIB_EXT}  # [not win]
        - if not exist %PREFIX%\\Library\\bin\\libiio.dll exit 1  # [win]
        - if not exist %PREFIX%\\Library\\lib\\libiio.lib exit 1  # [win]

  - name: pylibiio
    script: install_pylibiio.bat  # [win]
    script: install_pylibiio.sh  # [not win]
    build:
      string: py_{{ build }}
      noarch: python
    requirements:
      build:
        - cmake
        - make  # [not win]
        - ninja  # [win]
        # cross-compilation dependencies
        - python >=3.6                        # [build_platform != target_platform]
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
      host:
        - libiio-c
        - pip
        - python >=3.6
        - setuptools
      run:
        - {{ pin_subpackage('libiio-c', max_pin='x') }}
        - python
    test:
      imports:
        - iio

  - name: libiio
    build:
      run_exports:
        - {{ pin_subpackage('libiio-c', max_pin='x') }}
    requirements:
      run:
        - {{ pin_subpackage('libiio-c', exact=True) }}
        - {{ pin_subpackage('pylibiio', exact=True) }}
    test:
      commands:
        - iio_info --help
      imports:
        - iio

about:
  home: https://github.com/analogdevicesinc/libiio
  license: LGPL-2.1-or-later AND GPL-3.0-or-later
  license: LGPL-2.1-or-later AND GPL-3.0-or-later AND Unlicense AND ISC AND BSD-2-Clause  # [win]
  license_family: LGPL
  license_file:
    - COPYING.txt
    - COPYING_GPL.txt
    - deps/mdns/LICENSE  # [win]
    - deps/wingetopt/LICENSE  # [win]
  summary: Library for interfacing with Linux IIO devices
  description: |
    libiio is used to interface to the Linux Industrial Input/Output (IIO) Subsystem.
    The Linux IIO subsystem is intended to provide support for devices that in some
    sense are analog to digital or digital to analog converters (ADCs, DACs). This
    includes, but is not limited to ADCs, Accelerometers, Gyros, IMUs, Capacitance to
    Digital Converters (CDCs), Pressure Sensors, Color, Light and Proximity Sensors,
    Temperature Sensors, Magnetometers, DACs, DDS (Direct Digital Synthesis), PLLs
    (Phase Locked Loops), Variable/Programmable Gain Amplifiers (VGA, PGA), and RF
    transceivers. You can use libiio natively on an embedded Linux target (local mode),
    or use libiio to communicate remotely to that same target from a host Linux,
    Windows or MAC over USB or Ethernet or Serial.
  doc_url: https://analogdevicesinc.github.io/libiio/
  dev_url: https://github.com/analogdevicesinc/libiio

extra:
  feedstock-name: libiio
  recipe-maintainers:
    - ryanvolz
